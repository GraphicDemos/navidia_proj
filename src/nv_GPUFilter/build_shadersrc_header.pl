#! /usr/bin/perl

# $Id: //sw/devtools/SDK/9.5/SDK/DEMOS/OpenGL/src/GPUFilter/build_shadersrc_header.pl#1 $

# This script is used to generate "ShaderSrc.h" from all fo the
# .glsl and .glslang files in the current directory. "ShaderSrc.h"
# in turn will contain... well, shader source -- encapsulated as string
# constants.

use strict;

our $gOutName = "ShaderSrc.h";

# given a file name, return a long src string
sub extract_src {
    my $fileName = shift @_;
    my $code = "";
    my $line;
    open(SRC,$fileName) || return("// Unable to read file \"$fileName\"\n");
	while($line = <SRC>) {
	    $line =~ s:\s*//.*$::;
	    $line =~ s:\s*$::;
	    $line =~ s:^\s*::;
	    next if (length($line)<1);
	    $line =~ s/^/\"/;
	    $line =~ s/$/\\n\"\n/;
	    $code .= "\t$line";
	}
    close(SRC);
    return($code);
}

# get list of shaders in current disk dir
sub get_shader_list()
{
    my @shaders;
    opendir(HERE,".") || die("Cannot read dir\n");
	@shaders = grep(/\.glsl(ang)?$/,readdir(HERE));
    closedir(HERE);
    return @shaders;
}

sub var_name {
    my $varName = shift @_;
    $varName =~ s/\.gl.*//;
    $varName =~ s/-/_/g;
    $varName =~ s/$/_src/g;
    return $varName;
}

# main execution begins

sub main {
    my @shList = &get_shader_list();
    my $shaderFile;
    my $id = '$Id: //sw/devtools/SDK/9.5/SDK/DEMOS/OpenGL/src/GPUFilter/build_shadersrc_header.pl#1 $';
    open (HDR,"> $gOutName") || die("Cannot open output file \"$gOutName\"\n");
	print HDR <<ENDHDR;
//
// $gOutName
// Generated by $id
//

#ifndef _H_SHADERSRC_
#define _H_SHADERSRC_

ENDHDR

    for $shaderFile (@shList) {
	print HDR "// $shaderFile\n";
	my $shaderCode = &extract_src($shaderFile);
	my $var = &var_name($shaderFile);
	print HDR "const char $var\[\] = $shaderCode;\n";
    }
    print HDR <<ENDHDR;

#endif /* _H_SHADERSRC_ */

//////////////////////////// eof //
ENDHDR
    close(HDR);
    print "All done writing \"$gOutName\"\n";
}

&main;
