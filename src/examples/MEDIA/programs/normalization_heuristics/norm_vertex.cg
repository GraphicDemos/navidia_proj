/*********************************************************************NVMH3****

Copyright NVIDIA Corporation 2002
TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED
*AS IS* AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS
BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES
WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS)
ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF NVIDIA HAS
BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

******************************************************************************/

struct interpolants
{
    float2 texcoords            : TEXCOORD0;
    float2 texcoords1           : TEXCOORD1;
    float4 tangentToEyeMat0     : TEXCOORD4;
    float4 tangentToEyeMat1     : TEXCOORD5;
    float3 tangentToEyeMat2     : TEXCOORD6;
    float4 eyeSpacePosition     : TEXCOORD7;
};

void main(in float4 oPosition   : POSITION,
          in float2 texcoord0   : TEXCOORD0,
          in float3 tangent     : TANGENT,
          in float3 binormal    : BINORMAL,
          in float3 normal      : NORMAL,

          out float4 hPosition  : POSITION,
          out float4 color      : COLOR0,
          out interpolants OUT,

          uniform float bumpScale,
          uniform float4x4 modelViewProj,
          uniform float4x4 modelView,
          uniform float4x4 texture)
{
    hPosition = mul(modelViewProj, oPosition);
    color = float4(1.0, 1.0, 1.0, 1.0);

    OUT.texcoords = texcoord0;
    OUT.texcoords1 = texcoord0;
    
    OUT.eyeSpacePosition = mul(modelView, oPosition);

    OUT.tangentToEyeMat0.x = dot(modelView[0].xyz, tangent);
    OUT.tangentToEyeMat0.y = dot(modelView[0].xyz, binormal);
    OUT.tangentToEyeMat0.z = dot(modelView[0].xyz, normal);
    OUT.tangentToEyeMat0.w = bumpScale;
        
    OUT.tangentToEyeMat1.x = dot(modelView[1].xyz, tangent);
    OUT.tangentToEyeMat1.y = dot(modelView[1].xyz, binormal);
    OUT.tangentToEyeMat1.z = dot(modelView[1].xyz, normal);

    OUT.tangentToEyeMat2.x = dot(modelView[2].xyz, tangent);
    OUT.tangentToEyeMat2.y = dot(modelView[2].xyz, binormal);
    OUT.tangentToEyeMat2.z = dot(modelView[2].xyz, normal);
}