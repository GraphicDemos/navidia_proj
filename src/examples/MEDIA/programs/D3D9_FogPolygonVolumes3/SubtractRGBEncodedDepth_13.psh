/*--------------------------------------------------------------------- NVMH5 -|----------------------
Path:  Sdk\Media\programs\D3D9_FogPolygonVolumes3\
File:  SubtractRGBEncodedDepth_13.nvp

Copyright NVIDIA Corporation 2003
TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS* AND NVIDIA AND
AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA
OR ITS SUPPLIERS BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER
INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS) ARISING OUT OF THE USE OF OR INABILITY TO USE THIS
SOFTWARE, EVEN IF NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.


Comments:


-------------------------------------------------------------------------------|--------------------*/
 
#include "Constants.h"

ps.1.3
// 1/256 = 0.0039062
// 1/255 = 0.0039215
def c1, 0.5,	0.5,	0.5,	1.0
def c3, 0.00391, 0.00391, 0.00391, 0.00391
def c4, 0, 1, 0, 0				// RGBA mask for green

tex t0		// front facing acumulated depths
tex t1		// back facing acumulated depths


// calculate back - front
// Back should be higher value

add		r0, t1, -t0

// Alpha contains a negative value at the scale of the green
//  depth bits.  We need to add this into the green channel here
//  because ps.1.3 can't perform a DP4 texture address operation.
//  It can only do a DP3 texture address operation.
// .a to replicate alpha into all color channels

mad		r0, c4, -r0.a, r0


// Result is now [-1.1].  We want to store it in a texture,
//   so must bias and scale to [0,1] range.
// Unfortunately, this will drop the LSB of precision because
//   we are dealing with 9-bit signed values (8-bits + 1 sign bit)
//
// Rather than scaling [-1,1] to [0,1] we instead just
//   add 0.5, so the [-1/2, 1/2] range is scaled to [0,1]

add		r0, r0, c1


// Bias amount to compensate for offsets due to low
//  precision values and not being able to express
//  an exact 127.5 in the fixed precision numbers
// This bumps 127 up to 128.  With pixel shader 1.3
//  128 is the value that maps to 0.0 using _bx2 modifier

add		r0, r0, c3

