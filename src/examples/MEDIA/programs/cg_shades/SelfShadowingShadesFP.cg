// ----------------------------------------------------------------------------
// File:
//      SelfShadowingShadesFP.cg
//
// Contents:
//      This version of the shades shader corrects a visual artefact of the
//      simple implementations: The slats appear too bright. This is due to 
//      the fact that parallel slats would cast shadows on themselfes for most
//      angles.
//      This shader determines the amount of self-shadowing for a given angle
//      between the slats and the lightsource and attenuates the brightness
//      of the lighting equation accordingly. I.e. this shader does not
//      calculate acurate shadows with hard edges but rather a statistical
//      amount of self-shadowing.
//
// Author: Frank Jargstorff (fjargstorff@nvidia.com)
//
// Note:
//      Copyright (c) 2004 by NVIDIA Corp. All rights reserved.
// 
// ----------------------------------------------------------------------------


        // VertexToFragment
        //
        // Description:
        //      Data from the vertex shader.
        //          For a complete description see ShadesVP.cg
        //
struct VertexToFragment
{
    float4 vPosition   : POSITION;
    float3 vTopColor   : COLOR;
    float4 vUeUlSlU    : TEXCOORD0;
    float4 vNeShVeV    : TEXCOORD1;
    float4 vNhNl       : TEXCOORD2;
};


        // main
        //
        // Description:
        //      Procedural shades.
        //          Assuming the shader is applied to a quad the algorithm 
        //      determines if the top of a slat or on of the sides is hit by
        //      the eye-ray. If neither is true a totally transpartent color is
        //      returned. Otherwise the shader returns the top color as passed
        //      from the vertex shader in the top-of-the-slat case; otherwise
        //      the shader evaluates a lighting term for the side of the slat 
        //      and returns that.
        //
        // Parameters:
        //      oInput - the input data struct from the vertex program.
        //      cAmbientColor - the ambient color intensity.
        //      cDiffuseColor - the diffuse color intensity.
        //      cSpecularColor - the specular color intensity.
        //      nShininess     - the slat's shininess factor.
        //      nSpacing - spacing of the slats in u-direction.
        //      nHeight - height of the slats
        //      nOffset - offset in u-direction of the slat's top against
        //                its bottom. This enables to "tilt" slats.
        //      nScaleTexture - not used by this shader.
        //      oAlphaTexture - not used by this shader.
        //      oTexture - not used by this shader.
        //
        // Returns:
        //      The fragment's final color.
        //
        half4
main(in VertexToFragment oInput,
     uniform float4 cAmbientColor,
     uniform float4 cDiffuseColor,
     uniform float4 cSpecularColor,
     uniform float  nShininess,
     uniform float  nSpacing,
     uniform float  nHeight, 
     uniform float  nOffset, 
     uniform float2 vScaleTexture,
     uniform sampler1D oAlphaTexture,
     uniform sampler2D oTexture
    ): COLOR
{
    float u = frac(oInput.vUeUlSlU.w);
    float p = nHeight * oInput.vUeUlSlU.x;
    
    half4 vDiffuse  = half4((cDiffuseColor * oInput.vUeUlSlU.z).rgb, 0);
    half4 vSpecular = half4((cSpecularColor * pow(abs(oInput.vNeShVeV.y), nShininess)).rgb, 0);
    
    half4 vSideColor = step((u - nOffset) * oInput.vNeShVeV.x, p) 
            * (cAmbientColor + vDiffuse + step(0, oInput.vUeUlSlU.z) * vSpecular);
                
    vSideColor += step(p, (u - nSpacing - nOffset) * oInput.vNeShVeV.x) 
            * (cAmbientColor - vDiffuse + step(0, -oInput.vUeUlSlU.z) * vSpecular);
            
    float nAttenuation = abs( nSpacing * oInput.vNhNl.y / (nHeight * oInput.vUeUlSlU.y) );
    
    vSideColor.rgb *= min(nAttenuation, 1);
            
    half4 vColor = step(u, nSpacing) * vSideColor + (1-step(u, nSpacing)) * half4(oInput.vTopColor, 1);
    
    return vColor;
}
