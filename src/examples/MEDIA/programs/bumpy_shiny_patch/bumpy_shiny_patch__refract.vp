!!ARBvp1.0

#
# per-pixel bump refraction
#

# position
TEMP R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11;
ATTRIB dpdu = vertex.texcoord[0];
ATTRIB dpdv = vertex.normal;
ATTRIB texcoord = vertex.color;

PARAM c4 = program.env[4];
PARAM c5 = program.env[5];
PARAM c23 = program.env[23];
PARAM c24 = program.env[24];
PARAM c25 = program.env[25];

PARAM mvp[4] = { state.matrix.mvp };
PARAM m[4] = { state.matrix.modelview[0] };
PARAM mi[4] = { state.matrix.modelview[0].inverse };

DP4   result.position.x, mvp[0], vertex.position;
DP4   result.position.y, mvp[1], vertex.position;
DP4   result.position.z, mvp[2], vertex.position;
DP4   result.position.w, mvp[3], vertex.position;

	  
# R0 = normalize3(v[1])  ------------------------- Tangent

DP3   R0.w,   dpdu, dpdu ;
RSQ   R0.w,   R0.w       ;
MUL   R0.xyz, dpdu, -R0.w ;


# calc normal -- R2 = cross(R0,v[2])  ------------ Normal

MUL   R2, R0.zxyw, dpdv.yzxw      ;
MAD   R2, R0.yzxw, dpdv.zxyw, -R2 ;

# R2 = normalize(R2) (as done for R0 above)

DP3   R2.w,   R2, R2   ;
RSQ   R2.w,   R2.w     ;
MUL   R2.xyz, R2, R2.w ;


# calc binormal -- R1 = cross(R0,R2)  ------------ Binormal

MUL   R1, R0.zxyw, R2.yzxw      ;
MAD   R1, R0.yzxw, R2.zxyw, -R1 ;


# We need the "texel matrix" to 
# be (C)(R^t)(N)(R)(MV)(S)(B)(F), where C is the cubemap rotation,
# R^tNR is a non-uniform scaling matrix oriented about the eye vector,
# MV is the modelview matrix and S is the matrix
# that transforms vectors from texture space to
# object space, and B is a simple uniform scaling
# matrix, and F flip the sign of the normal vector if necessary
#
#      |  1   0   0 |                  | -1   0   0 |
#  F = |  0   1   0 |     -OR-     F = |  0  -1   0 |
#      |  0   0   1 |                  |  0   0  -1 |
#
# F, the "flipping" matrix is chosen based on the tangent-space eye position.
#
#      | b  0  0 |
#  B = | 0  b  0 |  
#      | 0  0  1 |
#
#      | Tx Bx Nx |   | R0.x R1.x R2.x |
#  S = | Ty By Ny | = | R0.y R1.y R2.y |
#      | Tz Bz Nz |   | R0.z R1.z R2.z |
#
#
#  (C)(R^t)(N)(R)(MV) cannot be pre-computed as in the reflective case
# 
#
#
# (C) (R^t) (N) (R) (M) (S) (B) (F)
#
# big task - calculate R rotation matrix
# R5 == normalized eye-space eye vector
#
# R is a rotation matrix that rotates the eye-space eye vector (E)
# into [ 0  0 1]. 
#
#     | Rr |   | Rrx Rry Rrz |   | R3.x  R3.y  R3.z |
# R = | Ru | = | Rux Ruy Ruz | = | R4.x  R4.y  R4.z |
#     | E  |   | Ex  Ey  Ez  |   | R5.x  R5.y  R5.z |
#
# Ru = normalize(cross([0 0 1], E  ))
# Rr =           cross(     E , Ru ))
#
# E = R5 = -normalize(M * v[OPOS])

DP4   R5.x, vertex.position, m[0] ;
DP4   R5.y, vertex.position, m[1] ;
DP4   R5.z, vertex.position, m[2] ;
DP3   R5.w, R5, R5         ;
RSQ   R5.w, R5.w           ;
MUL   R5.xyz, R5, -R5.w    ;


# Ru = R4 = cross([0,0,1], E) = cross(R6, R5)
# c[4] = [1, 2, 0, -1]

# for convenience
MOV   R6, c4.zzxz;

MUL   R4, R6.zxyw, R5.yzxw      ;
MAD   R4, R6.yzxw, R5.zxyw, -R4 ;


# R4 = normalize(R4)

DP3   R4.w,   R4, R4   ;

  # check for special case of E == [0 0 1]:
  # if R4.w == 0, then set R4 = [0 1 0 1]

     SGE R11, c4.z, R4.w;
     MUL R10, R11, c4.zxzx;
     ADD R11, c4.x, -R11;
     MAD R4, R4, R11, R10;

     RSQ   R4.w,   R4.w     ;
     MUL   R4.xyz, R4, R4.w ;


# Rr = R3 = cross(E, Ru) = cross(R5, R4)

MUL   R3, R5.zxyw, R4.yzxw      ;
MAD   R3, R5.yzxw, R4.zxyw, -R3 ;

# R3 should be unit length since R5 and R4 are orthogonal and unit length


# determine form of F

# eye-space eye position -> object-space (via inverse modelview matrix)
# not "exactly" object-space, because the origin at this vertex
ADD  R10.x, mi[0].w, -vertex.position.x;
ADD  R10.y, mi[1].w, -vertex.position.y; 
ADD  R10.z, mi[2].w, -vertex.position.z;

# get the z component of the tangent-space eye position
# -- to determine the location of the eye w.r.t the surface
DP3 R10.w, R2, R10;

  # if tangent-space eye z <= 0, the F does not flip, otherwise it does

     SGE R10.x, c4.z, R10.w;
     MAD R10, R10.x, c4.y, c4.w;
     MUL R10.xy, R10, c5.w;

# | R0 R1 R2 | = (SB) = (S)(B)

MUL R0.xyz,  R0, R10.x;
MUL R1.xyz,  R1, R10.y;
MUL R2.xyz,  R2, R10.z;

#                                  | c[8]  |
# | R6 R7 R8 | = (MSB) = (M)(SB) = | c[9]  | | R0 R1 R2 |
#                                  | c[10] |

DP3 R6.x, m[0],  R0;    DP3 R7.x, m[0],  R1;   DP3 R8.x, m[0],  R2;  
DP3 R6.y, m[1],  R0;    DP3 R7.y, m[1],  R1;   DP3 R8.y, m[1],  R2; 
DP3 R6.z, m[2],  R0;    DP3 R7.z, m[2],  R1;   DP3 R8.z, m[2],  R2;


#                                    | R3 |
# | R0 R1 R2 | = (RMSB) = (R)(MSB) = | R4 | | R6 R7 R8 |
#                                    | R5 |

DP3 R0.x, R3, R6;    DP3 R1.x, R3, R7;   DP3 R2.x, R3, R8;
DP3 R0.y, R4, R6;    DP3 R1.y, R4, R7;   DP3 R2.y, R4, R8;
DP3 R0.z, R5, R6;    DP3 R1.z, R5, R7;   DP3 R2.z, R5, R8;


#                                      | c[5].x    0      0    |
# | R0 R1 R2 | = (NRMSB) = (N)(RMSB) = |   0     c[5].y   0    | | R0 R1 R2 |
#                                      |   0       0    c[5].z |

MUL R0.xyz, R0, c5;
MUL R1.xyz, R1, c5;
MUL R2.xyz, R2, c5;


# | R6 |                       | c[23] |
# | R7 | = (CR^t) = (C)(R^t) = | c[24] | | R3 R4 R5 |
# | R8 |                       | c[25] |

DP3 R6.x, c23, R3;    DP3 R6.y, c23, R4;   DP3 R6.z, c23, R5;
DP3 R7.x, c24, R3;    DP3 R7.y, c24, R4;   DP3 R7.z, c24, R5;
DP3 R8.x, c25, R3;    DP3 R8.y, c25, R4;   DP3 R8.z, c25, R5;


# | o[TEX1] |                                 | R6 |
# | o[TEX2] | = (CR^tNRMSB) = (CR^t)(NRMSB) = | R7 | | R0 R1 R2 |
# | o[TEX3] |                                 | R8 |

DP3 result.texcoord[1].x, R6, R0;    DP3 result.texcoord[1].y, R6, R1;   DP3 result.texcoord[1].z, R6, R2;
DP3 result.texcoord[2].x, R7, R0;    DP3 result.texcoord[2].y, R7, R1;   DP3 result.texcoord[2].z, R7, R2;
DP3 result.texcoord[3].x, R8, R0;    DP3 result.texcoord[3].y, R8, R1;   DP3 result.texcoord[3].z, R8, R2;


# col0 = white  (c[4] == [1, .5, 0, -1])
MOV   result.color, c4.x;

	  
# pass texture0 coordinates through
MOV   result.texcoord[0], texcoord  ;

END
